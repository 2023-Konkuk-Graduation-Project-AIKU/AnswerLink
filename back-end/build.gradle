//def frontendDir = "./test_front_back/Answerlink/front-end"


plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.4'
	id 'io.spring.dependency-management' version '1.1.3'
	// id 'com.github.node-gradle.node' version '3.2.1'
}

// apply plugin : 'com.github.node-gradle.node'

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

// node{
// 	version = '18.16.1'
// 	npmVersion = '9.5.1'

// 	down
// }

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation group: 'org.testng', name: 'testng', version: '7.8.0'
	implementation 'org.jsoup:jsoup:1.15.3'
	implementation 'org.seleniumhq.selenium:selenium-java:4.1.2'
	// https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-remote-driver
	//implementation group: 'org.seleniumhq.selenium', name: 'selenium-remote-driver', version: '4.15.0'

	//implementation project:'org.seleniumhq.selenium:selenium-devtools-v86:4.8.3'
	implementation group: 'org.seleniumhq.selenium', name: 'selenium-devtools-v119', version: '4.15.0'
	implementation group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '4.9.1'
	implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.1.RELEASE'
}

// tasks.named('test') {
// 	useJUnitPlatform()
// }

sourceSets {
	main {
		resources { srcDirs = ["./test_front_back/Answerlink/back-end/src/main/resources"]
		}
	}
}

processResources { dependsOn "copyReactBuildFiles" }

task installReact(type: Exec) {
	workingDir "../front-end"
	inputs.dir "../front-end"
	group = BasePlugin.BUILD_GROUP
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine "npm.cmd", "audit", "fix"
		commandLine 'npm.cmd', 'install' }
	else {
		commandLine "npm", "audit", "fix" commandLine 'npm', 'install'
	}
}

task buildReact(type: Exec) {
	dependsOn "installReact"
	workingDir "../front-end"
	inputs.dir "../front-end"
	group = BasePlugin.BUILD_GROUP
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine "npm.cmd", "run-script", "build"
	} else {
		commandLine "npm", "run-script", "build"
	}
}

task copyReactBuildFiles(type: Copy) {
	dependsOn "buildReact"
	from "../front-end/build"
	into "./test_front_back/Answerlink/back-end/src/main/resources/static"
}


// npm install
// task appNpmInstall(type: NpmTask) {
//    workingDir = file("/front-end")
//    args = ["install"]
// }

// // npm build
// task npmBuild(type: NpmTask) {
//    workingDir = file("/front-end")
//    args = ["run", "build"]
// }

// // 빌드된 결과 이동
// task copyWebApp(type: Copy) {
//    from "front-end/build"
//    into 'build/resources/main/static/'
// }

// npmBuild.dependsOn appNpmInstall
// copyWebApp.dependsOn npmBuild
// compileJava.dependsOn copyWebApp


